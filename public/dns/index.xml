<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dns on Bxg7 owned</title>
    <link>http://localhost/dns/</link>
    <description>Recent content in dns on Bxg7 owned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://localhost/dns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Post</title>
      <link>http://localhost/dns/my-first-post/</link>
      <pubDate>Sat, 09 Sep 2023 21:47:54 +0700</pubDate>
      
      <guid>http://localhost/dns/my-first-post/</guid>
      <description>Test</description>
    </item>
    
    <item>
      <title>DNS request sniffing</title>
      <link>http://localhost/dns/dns_request_sniffing/</link>
      <pubDate>Sat, 09 Sep 2023 21:43:00 +0700</pubDate>
      
      <guid>http://localhost/dns/dns_request_sniffing/</guid>
      <description>After we become the mitm we can sniff the DNS Question Record&amp;rsquo;s QNAME field.
I am using netfilterqueue here, but it could be done without it as well because we are not modifying any packets on the fly, we are only inspecting.
To get this code to work you first need to run arp cache poisoning and run this command on attacker machine:
iptables -I FORWARD -j NFQUEUE --queue-num 0 Or without arp spoofing on local machine:</description>
    </item>
    
    <item>
      <title>DNS spoofing</title>
      <link>http://localhost/dns/dns_spoofing/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/dns/dns_spoofing/</guid>
      <description>After we become the mitm we can spoof DNS answers, by modifying the rdata field in the DNS Response request packet.
After spoofing the rdata field will contain a spoofed ip address of a attacker server instead of the original servers IP address.
For this we need to modify packets on the fly. With scapy alone this is not possible, we need to use NetfilterQueue.
To get this code to work you first need to run arp cache poisoning and run this command on attacker machine:</description>
    </item>
    
  </channel>
</rss>
